"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/vfile-message";
exports.ids = ["vendor-chunks/vfile-message"];
exports.modules = {

/***/ "(ssr)/./node_modules/vfile-message/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/vfile-message/lib/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VFileMessage: () => (/* binding */ VFileMessage)\n/* harmony export */ });\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-stringify-position */ \"(ssr)/./node_modules/unist-util-stringify-position/lib/index.js\");\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */ /**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */ \n/**\n * Message.\n */ class VFileMessage extends Error {\n    /**\n   * Create a message for `reason`.\n   *\n   * > ü™¶ **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */ // eslint-disable-next-line complexity\n    constructor(causeOrReason, optionsOrParentOrPlace, origin){\n        super();\n        if (typeof optionsOrParentOrPlace === \"string\") {\n            origin = optionsOrParentOrPlace;\n            optionsOrParentOrPlace = undefined;\n        }\n        /** @type {string} */ let reason = \"\";\n        /** @type {Options} */ let options = {};\n        let legacyCause = false;\n        if (optionsOrParentOrPlace) {\n            // Point.\n            if (\"line\" in optionsOrParentOrPlace && \"column\" in optionsOrParentOrPlace) {\n                options = {\n                    place: optionsOrParentOrPlace\n                };\n            } else if (\"start\" in optionsOrParentOrPlace && \"end\" in optionsOrParentOrPlace) {\n                options = {\n                    place: optionsOrParentOrPlace\n                };\n            } else if (\"type\" in optionsOrParentOrPlace) {\n                options = {\n                    ancestors: [\n                        optionsOrParentOrPlace\n                    ],\n                    place: optionsOrParentOrPlace.position\n                };\n            } else {\n                options = {\n                    ...optionsOrParentOrPlace\n                };\n            }\n        }\n        if (typeof causeOrReason === \"string\") {\n            reason = causeOrReason;\n        } else if (!options.cause && causeOrReason) {\n            legacyCause = true;\n            reason = causeOrReason.message;\n            options.cause = causeOrReason;\n        }\n        if (!options.ruleId && !options.source && typeof origin === \"string\") {\n            const index = origin.indexOf(\":\");\n            if (index === -1) {\n                options.ruleId = origin;\n            } else {\n                options.source = origin.slice(0, index);\n                options.ruleId = origin.slice(index + 1);\n            }\n        }\n        if (!options.place && options.ancestors && options.ancestors) {\n            const parent = options.ancestors[options.ancestors.length - 1];\n            if (parent) {\n                options.place = parent.position;\n            }\n        }\n        const start = options.place && \"start\" in options.place ? options.place.start : options.place;\n        /* eslint-disable no-unused-expressions */ /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */ this.ancestors = options.ancestors || undefined;\n        /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */ this.cause = options.cause || undefined;\n        /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */ this.column = start ? start.column : undefined;\n        /**\n     * State of problem.\n     *\n     * * `true` ‚Äî error, file not usable\n     * * `false` ‚Äî warning, change may be needed\n     * * `undefined` ‚Äî change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */ this.fatal = undefined;\n        /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */ this.file;\n        // Field from `Error`.\n        /**\n     * Reason for message.\n     *\n     * @type {string}\n     */ this.message = reason;\n        /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */ this.line = start ? start.line : undefined;\n        // Field from `Error`.\n        /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */ this.name = (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_0__.stringifyPosition)(options.place) || \"1:1\";\n        /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */ this.place = options.place || undefined;\n        /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */ this.reason = this.message;\n        /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */ this.ruleId = options.ruleId || undefined;\n        /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */ this.source = options.source || undefined;\n        // Field from `Error`.\n        /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */ this.stack = legacyCause && options.cause && typeof options.cause.stack === \"string\" ? options.cause.stack : \"\";\n        // The following fields are ‚Äúwell known‚Äù.\n        // Not standard.\n        // Feel free to add other non-standard fields to your messages.\n        /**\n     * Specify the source value that‚Äôs being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */ this.actual;\n        /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */ this.expected;\n        /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */ this.note;\n        /**\n     * Link to docs for the message.\n     *\n     * > üëâ **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */ this.url;\n    /* eslint-enable no-unused-expressions */ }\n}\nVFileMessage.prototype.file = \"\";\nVFileMessage.prototype.name = \"\";\nVFileMessage.prototype.reason = \"\";\nVFileMessage.prototype.message = \"\";\nVFileMessage.prototype.stack = \"\";\nVFileMessage.prototype.column = undefined;\nVFileMessage.prototype.line = undefined;\nVFileMessage.prototype.ancestors = undefined;\nVFileMessage.prototype.cause = undefined;\nVFileMessage.prototype.fatal = undefined;\nVFileMessage.prototype.place = undefined;\nVFileMessage.prototype.ruleId = undefined;\nVFileMessage.prototype.source = undefined;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/vfile-message/lib/index.js\n");

/***/ })

};
;